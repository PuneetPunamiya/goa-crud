// Code generated by goa v3.1.1, DO NOT EDIT.
//
// create gRPC client encoders and decoders
//
// Command:
// $ goa gen crud/design

package client

import (
	"context"
	create "crud/gen/create"
	createpb "crud/gen/grpc/create/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCreateFunc builds the remote method to invoke for "create" service
// "create" endpoint.
func BuildCreateFunc(grpccli createpb.CreateClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*createpb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &createpb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to create create endpoint.
func EncodeCreateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*create.Blog)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "create", "*create.Blog", v)
	}
	return NewCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the create create endpoint.
func DecodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*createpb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "create", "*createpb.CreateResponse", v)
	}
	if err := ValidateCreateResponse(message); err != nil {
		return nil, err
	}
	res := NewCreateResult(message)
	return res, nil
}

// BuildListFunc builds the remote method to invoke for "create" service "list"
// endpoint.
func BuildListFunc(grpccli createpb.CreateClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*createpb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &createpb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the create list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*createpb.ListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "list", "*createpb.ListResponse", v)
	}
	if err := ValidateListResponse(message); err != nil {
		return nil, err
	}
	res := NewListResult(message)
	return res, nil
}

// BuildRemoveFunc builds the remote method to invoke for "create" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli createpb.CreateClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*createpb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &createpb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to create remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*create.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "remove", "*create.RemovePayload", v)
	}
	return NewRemoveRequest(payload), nil
}

// BuildUpdateFunc builds the remote method to invoke for "create" service
// "update" endpoint.
func BuildUpdateFunc(grpccli createpb.CreateClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*createpb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &createpb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to create update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*create.UpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "update", "*create.UpdatePayload", v)
	}
	return NewUpdateRequest(payload), nil
}

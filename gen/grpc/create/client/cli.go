// Code generated by goa v3.1.1, DO NOT EDIT.
//
// create gRPC client CLI support package
//
// Command:
// $ goa gen crud/design

package client

import (
	create "crud/gen/create"
	createpb "crud/gen/grpc/create/pb"
	"encoding/json"
	"fmt"
)

// BuildCreatePayload builds the payload for the create create endpoint from
// CLI flags.
func BuildCreatePayload(createCreateMessage string) (*create.Blog, error) {
	var err error
	var message createpb.CreateRequest
	{
		if createCreateMessage != "" {
			err = json.Unmarshal([]byte(createCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"comments\": [\n         \"Et facere sed.\",\n         \"Veritatis est atque alias in.\",\n         \"Eveniet velit nihil dignissimos.\"\n      ],\n      \"id\": 140759512,\n      \"name\": \"fen\"\n   }'")
			}
		}
	}
	v := &create.Blog{}
	if message.Id != 0 {
		v.ID = &message.Id
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Comments != nil {
		v.Comments = make([]string, len(message.Comments))
		for i, val := range message.Comments {
			v.Comments[i] = val
		}
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the create remove endpoint from
// CLI flags.
func BuildRemovePayload(createRemoveMessage string) (*create.RemovePayload, error) {
	var err error
	var message createpb.RemoveRequest
	{
		if createRemoveMessage != "" {
			err = json.Unmarshal([]byte(createRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"id\": 2454953123\n   }'")
			}
		}
	}
	v := &create.RemovePayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the create update endpoint from
// CLI flags.
func BuildUpdatePayload(createUpdateMessage string) (*create.UpdatePayload, error) {
	var err error
	var message createpb.UpdateRequest
	{
		if createUpdateMessage != "" {
			err = json.Unmarshal([]byte(createUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"comments\": [\n         \"Nulla ipsa.\",\n         \"At sed nesciunt velit repudiandae exercitationem qui.\"\n      ],\n      \"id\": 3362795313,\n      \"name\": \"Non nisi.\"\n   }'")
			}
		}
	}
	v := &create.UpdatePayload{
		Name: message.Name,
	}
	if message.Id != 0 {
		v.ID = &message.Id
	}
	if message.Comments != nil {
		v.Comments = make([]string, len(message.Comments))
		for i, val := range message.Comments {
			v.Comments[i] = val
		}
	}

	return v, nil
}

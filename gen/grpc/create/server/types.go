// Code generated by goa v3.1.1, DO NOT EDIT.
//
// create gRPC server types
//
// Command:
// $ goa gen crud/design

package server

import (
	create "crud/gen/create"
	createpb "crud/gen/grpc/create/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewCreatePayload builds the payload of the "create" endpoint of the "create"
// service from the gRPC request type.
func NewCreatePayload(message *createpb.CreateRequest) *create.Blog {
	v := &create.Blog{}
	if message.Id != 0 {
		v.ID = &message.Id
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Comments != nil {
		v.Comments = make([]string, len(message.Comments))
		for i, val := range message.Comments {
			v.Comments[i] = val
		}
	}
	return v
}

// NewCreateResponse builds the gRPC response type from the result of the
// "create" endpoint of the "create" service.
func NewCreateResponse(result *create.Blog) *createpb.CreateResponse {
	message := &createpb.CreateResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Comments != nil {
		message.Comments = make([]string, len(result.Comments))
		for i, val := range result.Comments {
			message.Comments[i] = val
		}
	}
	return message
}

// NewListResponse builds the gRPC response type from the result of the "list"
// endpoint of the "create" service.
func NewListResponse(result []*create.Storedblog) *createpb.ListResponse {
	message := &createpb.ListResponse{}
	message.Field = make([]*createpb.Storedblog, len(result))
	for i, val := range result {
		message.Field[i] = &createpb.Storedblog{
			Id:   val.ID,
			Name: val.Name,
		}
		if val.Comments != nil {
			message.Field[i].Comments = make([]string, len(val.Comments))
			for j, val := range val.Comments {
				message.Field[i].Comments[j] = val
			}
		}
	}
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "create"
// service from the gRPC request type.
func NewRemovePayload(message *createpb.RemoveRequest) *create.RemovePayload {
	v := &create.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "create" service.
func NewRemoveResponse() *createpb.RemoveResponse {
	message := &createpb.RemoveResponse{}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "create"
// service from the gRPC request type.
func NewUpdatePayload(message *createpb.UpdateRequest) *create.UpdatePayload {
	v := &create.UpdatePayload{
		Name: message.Name,
	}
	if message.Id != 0 {
		v.ID = &message.Id
	}
	if message.Comments != nil {
		v.Comments = make([]string, len(message.Comments))
		for i, val := range message.Comments {
			v.Comments[i] = val
		}
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "create" service.
func NewUpdateResponse() *createpb.UpdateResponse {
	message := &createpb.UpdateResponse{}
	return message
}

// ValidateCreateRequest runs the validations defined on CreateRequest.
func ValidateCreateRequest(message *createpb.CreateRequest) (err error) {
	if message.Name != "" {
		if utf8.RuneCountInString(message.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 100, false))
		}
	}
	if len(message.Comments) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.comments", message.Comments, len(message.Comments), 100, false))
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *createpb.UpdateRequest) (err error) {
	if message.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "message"))
	}
	return
}

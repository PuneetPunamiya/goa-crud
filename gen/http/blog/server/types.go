// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog HTTP server types
//
// Command:
// $ goa gen crud/design

package server

import (
	blog "crud/gen/blog"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "blog" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// ID of a person
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Comments
	Comments []*CommentsRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// UpdateRequestBody is the type of the "blog" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Details of blog to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Comments to be updated
	Comments []*CommentsRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// AddRequestBody is the type of the "blog" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Comment added to an existing blog
	Comments *CommentsRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CreateResponseBody is the type of the "blog" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of a person
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Comments
	Comments []*CommentsResponseBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// ListResponseBody is the type of the "blog" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredblogResponse

// AddResponseBody is the type of the "blog" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// Id of blog
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment added to an existing blog
	Comments *CommentsResponseBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentsResponseBody is used to define fields on response body types.
type CommentsResponseBody struct {
	// ID of a comment
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comments *string `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// StoredblogResponse is used to define fields on response body types.
type StoredblogResponse struct {
	// ID is the unique id of the blog.
	ID uint32 `form:"id" json:"id" xml:"id"`
	// Name of person
	Name string `form:"name" json:"name" xml:"name"`
	// Comments
	Comments []*CommentsResponse `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentsResponse is used to define fields on response body types.
type CommentsResponse struct {
	// ID of a comment
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comments *string `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentsRequestBody is used to define fields on request body types.
type CommentsRequestBody struct {
	// ID of a comment
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comments *string `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "blog" service.
func NewCreateResponseBody(res *blog.Blog) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.Comments != nil {
		body.Comments = make([]*CommentsResponseBody, len(res.Comments))
		for i, val := range res.Comments {
			body.Comments[i] = marshalBlogCommentsToCommentsResponseBody(val)
		}
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "blog" service.
func NewListResponseBody(res []*blog.Storedblog) ListResponseBody {
	body := make([]*StoredblogResponse, len(res))
	for i, val := range res {
		body[i] = marshalBlogStoredblogToStoredblogResponse(val)
	}
	return body
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "blog" service.
func NewAddResponseBody(res *blog.NewComment) *AddResponseBody {
	body := &AddResponseBody{
		ID: res.ID,
	}
	if res.Comments != nil {
		body.Comments = marshalBlogCommentsToCommentsResponseBody(res.Comments)
	}
	return body
}

// NewCreateBlog builds a blog service create endpoint payload.
func NewCreateBlog(body *CreateRequestBody) *blog.Blog {
	v := &blog.Blog{
		ID:   body.ID,
		Name: body.Name,
	}
	if body.Comments != nil {
		v.Comments = make([]*blog.Comments, len(body.Comments))
		for i, val := range body.Comments {
			v.Comments[i] = unmarshalCommentsRequestBodyToBlogComments(val)
		}
	}

	return v
}

// NewRemovePayload builds a blog service remove endpoint payload.
func NewRemovePayload(id uint32) *blog.RemovePayload {
	v := &blog.RemovePayload{}
	v.ID = id

	return v
}

// NewUpdatePayload builds a blog service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id uint32) *blog.UpdatePayload {
	v := &blog.UpdatePayload{
		Name: *body.Name,
	}
	v.Comments = make([]*blog.Comments, len(body.Comments))
	for i, val := range body.Comments {
		v.Comments[i] = unmarshalCommentsRequestBodyToBlogComments(val)
	}
	v.ID = &id

	return v
}

// NewAddNewComment builds a blog service add endpoint payload.
func NewAddNewComment(body *AddRequestBody, id uint32) *blog.NewComment {
	v := &blog.NewComment{}
	if body.Comments != nil {
		v.Comments = unmarshalCommentsRequestBodyToBlogComments(body.Comments)
	}
	v.ID = &id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if len(body.Comments) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.comments", body.Comments, len(body.Comments), 100, false))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
	}
	return
}

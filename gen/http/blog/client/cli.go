// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog HTTP client CLI support package
//
// Command:
// $ goa gen crud/design

package client

import (
	blog "crud/gen/blog"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the blog create endpoint from CLI
// flags.
func BuildCreatePayload(blogCreateBody string) (*blog.Blog, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(blogCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"comments\": [\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         },\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         },\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         }\n      ],\n      \"id\": 1089966870,\n      \"name\": \"x88\"\n   }'")
		}
	}
	v := &blog.Blog{
		ID:   body.ID,
		Name: body.Name,
	}
	if body.Comments != nil {
		v.Comments = make([]*blog.Comments, len(body.Comments))
		for i, val := range body.Comments {
			v.Comments[i] = marshalCommentsRequestBodyToBlogComments(val)
		}
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the blog remove endpoint from CLI
// flags.
func BuildRemovePayload(blogRemoveID string) (*blog.RemovePayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(blogRemoveID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	v := &blog.RemovePayload{}
	v.ID = id

	return v, nil
}

// BuildUpdatePayload builds the payload for the blog update endpoint from CLI
// flags.
func BuildUpdatePayload(blogUpdateBody string, blogUpdateID string) (*blog.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(blogUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"comments\": [\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         },\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         },\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         }\n      ],\n      \"name\": \"Nihil consequatur sunt asperiores.\"\n   }'")
		}
		if body.Comments == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(blogUpdateID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	v := &blog.UpdatePayload{
		Name: body.Name,
	}
	if body.Comments != nil {
		v.Comments = make([]*blog.Comments, len(body.Comments))
		for i, val := range body.Comments {
			v.Comments[i] = marshalCommentsRequestBodyToBlogComments(val)
		}
	}
	v.ID = &id

	return v, nil
}

// BuildAddPayload builds the payload for the blog add endpoint from CLI flags.
func BuildAddPayload(blogAddBody string, blogAddID string) (*blog.NewComment, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(blogAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"comments\": {\n         \"comments\": \"Et et incidunt cum omnis eligendi.\",\n         \"id\": 3140786710\n      }\n   }'")
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(blogAddID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	v := &blog.NewComment{}
	if body.Comments != nil {
		v.Comments = marshalCommentsRequestBodyToBlogComments(body.Comments)
	}
	v.ID = &id

	return v, nil
}

// BuildShowPayload builds the payload for the blog show endpoint from CLI
// flags.
func BuildShowPayload(blogShowBody string, blogShowID string) (*blog.Blog, error) {
	var err error
	var body ShowRequestBody
	{
		err = json.Unmarshal([]byte(blogShowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"comments\": [\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         },\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         },\n         {\n            \"comments\": \"Et et incidunt cum omnis eligendi.\",\n            \"id\": 3140786710\n         }\n      ],\n      \"name\": \"vq2\"\n   }'")
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(blogShowID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	v := &blog.Blog{
		Name: body.Name,
	}
	if body.Comments != nil {
		v.Comments = make([]*blog.Comments, len(body.Comments))
		for i, val := range body.Comments {
			v.Comments[i] = marshalCommentsRequestBodyToBlogComments(val)
		}
	}
	v.ID = &id

	return v, nil
}

// BuildOauthPayload builds the payload for the blog oauth endpoint from CLI
// flags.
func BuildOauthPayload(blogOauthBody string) (*blog.OauthPayload, error) {
	var err error
	var body OauthRequestBody
	{
		err = json.Unmarshal([]byte(blogOauthBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"token\": \"Est placeat.\"\n   }'")
		}
	}
	v := &blog.OauthPayload{
		Token: body.Token,
	}

	return v, nil
}

// BuildJWTPayload builds the payload for the blog jwt endpoint from CLI flags.
func BuildJWTPayload(blogJWTAuth string) (*blog.JWTPayload, error) {
	var auth *string
	{
		if blogJWTAuth != "" {
			auth = &blogJWTAuth
		}
	}
	v := &blog.JWTPayload{}
	v.Auth = auth

	return v, nil
}

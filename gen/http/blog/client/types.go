// Code generated by goa v3.1.1, DO NOT EDIT.
//
// blog HTTP client types
//
// Command:
// $ goa gen crud/design

package client

import (
	blog "crud/gen/blog"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "blog" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// ID of a person
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Comments
	Comments []*CommentsRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// UpdateRequestBody is the type of the "blog" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Details of blog to be updated
	Name string `form:"name" json:"name" xml:"name"`
	// Comments to be updated
	Comments []*CommentsRequestBody `form:"comments" json:"comments" xml:"comments"`
}

// AddRequestBody is the type of the "blog" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Comment added to an existing blog
	Comments *CommentsRequestBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CreateResponseBody is the type of the "blog" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of a person
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Comments
	Comments []*CommentsResponseBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// ListResponseBody is the type of the "blog" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredblogResponse

// AddResponseBody is the type of the "blog" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// Id of blog
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment added to an existing blog
	Comments *CommentsResponseBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentsRequestBody is used to define fields on request body types.
type CommentsRequestBody struct {
	// ID of a comment
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comments *string `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentsResponseBody is used to define fields on response body types.
type CommentsResponseBody struct {
	// ID of a comment
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comments *string `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// StoredblogResponse is used to define fields on response body types.
type StoredblogResponse struct {
	// ID is the unique id of the blog.
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of person
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Comments
	Comments []*CommentsResponse `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CommentsResponse is used to define fields on response body types.
type CommentsResponse struct {
	// ID of a comment
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment for the blog
	Comments *string `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "blog" service.
func NewCreateRequestBody(p *blog.Blog) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:   p.ID,
		Name: p.Name,
	}
	if p.Comments != nil {
		body.Comments = make([]*CommentsRequestBody, len(p.Comments))
		for i, val := range p.Comments {
			body.Comments[i] = marshalBlogCommentsToCommentsRequestBody(val)
		}
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "blog" service.
func NewUpdateRequestBody(p *blog.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name: p.Name,
	}
	if p.Comments != nil {
		body.Comments = make([]*CommentsRequestBody, len(p.Comments))
		for i, val := range p.Comments {
			body.Comments[i] = marshalBlogCommentsToCommentsRequestBody(val)
		}
	}
	return body
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "blog" service.
func NewAddRequestBody(p *blog.NewComment) *AddRequestBody {
	body := &AddRequestBody{}
	if p.Comments != nil {
		body.Comments = marshalBlogCommentsToCommentsRequestBody(p.Comments)
	}
	return body
}

// NewCreateBlogCreated builds a "blog" service "create" endpoint result from a
// HTTP "Created" response.
func NewCreateBlogCreated(body *CreateResponseBody) *blog.Blog {
	v := &blog.Blog{
		ID:   body.ID,
		Name: body.Name,
	}
	if body.Comments != nil {
		v.Comments = make([]*blog.Comments, len(body.Comments))
		for i, val := range body.Comments {
			v.Comments[i] = unmarshalCommentsResponseBodyToBlogComments(val)
		}
	}

	return v
}

// NewListStoredblogOK builds a "blog" service "list" endpoint result from a
// HTTP "OK" response.
func NewListStoredblogOK(body []*StoredblogResponse) []*blog.Storedblog {
	v := make([]*blog.Storedblog, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredblogResponseToBlogStoredblog(val)
	}
	return v
}

// NewAddNewCommentCreated builds a "blog" service "add" endpoint result from a
// HTTP "Created" response.
func NewAddNewCommentCreated(body *AddResponseBody) *blog.NewComment {
	v := &blog.NewComment{
		ID: body.ID,
	}
	if body.Comments != nil {
		v.Comments = unmarshalCommentsResponseBodyToBlogComments(body.Comments)
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if len(body.Comments) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.comments", body.Comments, len(body.Comments), 100, false))
	}
	return
}

// ValidateStoredblogResponse runs the validations defined on StoredblogResponse
func ValidateStoredblogResponse(body *StoredblogResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if len(body.Comments) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.comments", body.Comments, len(body.Comments), 100, false))
	}
	return
}
